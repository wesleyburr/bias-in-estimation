
R version 3.1.2 (2014-10-31) -- "Pumpkin Helmet"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> #
> #  Generate Figure 4 for paper
> #
> 
> library("multitaper")
> library("splines")
> library("MASS")
> 
> # 10 years of data, approximately
> time <- 1:3650
> Nknot <- 60
> test <- ns(time, df=Nknot) # 6 knots per year
> spec <- matrix(data=0, nrow=16385, ncol=Nknot)
> for(j in 1:Nknot) { spec[,j] <- spec.mtm(test[,j],deltat=86400,nFFT=2*16384,plot=FALSE)$spec }
> 
> freqs <- seq(0,0.5,1/2/16384)
> theory <- rep(1,min(which(freqs > 6/365))+5)
> cutoff <- min(which(freqs > 6/365))+5
> theory <- c(theory, rep(1e-21, length(freqs)-length(theory)))
> freqs <- freqs*365
> 
> # ** only using vectors 1-58, because 59 and 60 have _very_ poor spectral properties
> #    and make the theoretical transfer function appear worse than the actual performance
> # ** this _helps_ the case of the natural cubic regression splines
> 
> # projection matrix has eigenvalues 1 and 0; the eigenvalue of H^T*H gives the magnitude correction factor
> etf <- eigen(t(test[, 1:58]) %*% test[, 1:58])$value[1]  
> # magnitude transfer function: sum of the individual projection vectors, normalized by etf
> tf <- rowSums(spec[, 1:58]) / (etf * 86400)
> 
> # estimate via averaged simulation on zero-mean data
> S <- test %*% ginv(t(test) %*% test) %*% t(test)
> M <- 1000; N <- 3650
> spec2 <- matrix(data = 0, nrow = 16385, ncol = M)
> for(j in 1:M) {
+   simDat <- rnorm(n = N, sd = 2)
+   fit <- S %*% simDat
+   spec2[, j] <- spec.mtm(fit, deltat = 86400, nFFT = 2*16384, plot = FALSE)$spec /
+                 spec.mtm(simDat, deltat = 86400, nFFT = 2*16384, plot = FALSE)$spec
+ }
